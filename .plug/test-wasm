#!/usr/bin/env bash
#
# Runs tests using the specified nightly release and corresponding wasm target.

set -o errexit
set -o nounset
set -o pipefail

source "$(dirname "$0")/logger.sh"

program_name=$0

# Prints examples.
example() {
  local eg_package="sp-runtime-interface-test"
  local eg_function="host_function_not_found"
  echo "Example"
  echo "  $program_name nightly-2020-04-17 -p $eg_package"
  echo "  $program_name nightly-2020-04-17 -p $eg_package $eg_function"
}

# Prints usage message.
usage() {
  local usage_msg="Usage: $program_name"
  printf "%-${#usage_msg}s %s\n" "$usage_msg" {NIGHTLY-VERSION}
  printf "%-${#usage_msg}s %s\n" "" "{-p --package | --all --workspace}"
  echo "   NIGHTLY-VERSION    Use a specific nightly release."
  echo "                      Eg, nightly-2020-04-17"
  echo "   -p, --package      Test a specific test."
  echo "--all, --workspace    Test all crates."
  example
  exit 1
}

# Must provide at least two args.
if [ $# -lt 2 ]; then
  error "arg count mismatch"
fi

# Parse the first arg and save it to $nightly_version.
if [[ $1 =~ ^nightly-[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
  nightly_version=$1
else
  error "nightly release format mismatch"
  usage
fi

# Parse the second arg and save it to $package_test_setting.
if [[ $2 =~ ^-p$|^--package$ ]]; then
  if [[ ! -z "$3" ]]; then
    package_test_setting="$2 ${@:3}"
  else
    error "please specify package to test."
    usage
  fi
elif [[ $2 =~ ^--all|^--workspace ]]; then
  package_test_setting=$2
else
  error "please provide the second required argument."
  usage
fi

# Install nightly release.
info "installing $nightly_version release..."
rustup install $nightly_version

# Install wasm target for the nightly release.
info "adding wasm target for $nightly_version..."
rustup target add wasm32-unknown-unknown --toolchain=$nightly_version

# Run tests using the nightly release.
info "running tests for $nightly_version"
cmd="cargo +$nightly_version test $package_test_setting"
info "$cmd"
eval "$cmd"
